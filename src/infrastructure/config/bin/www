#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server');
const logger = require('../logs/logger');
const http = require('http');
const {
  onError,
  uncaughtExceptionMonitorHandler,
  unhandledRejectionHandler,
  warningExceptionHandler
} = require('../system-events');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  logger.info(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
// process.on('unhandledRejection', unhandledRejectionHandler);
// process.on('uncaughtExceptionMonitor', uncaughtExceptionMonitorHandler);
// process.on('warning', warningExceptionHandler);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

module.exports = app;